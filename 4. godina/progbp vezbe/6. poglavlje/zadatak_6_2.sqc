/* Napisati C/SQL program koji za svaki predmet omogućava korisniku 
 * da poveća broj ESPB za 1. Nakon svakog ažuriranja, proveriti da 
 * li je odgovarajuci red u tabeli izmenjen ponovnim dohvatanjem 
 * informacija.
 * Napisati program tako da može da radi u višekorisničkom okruženju.
 * Obrada jednog predmeta predstavlja jednu transakciju. Postaviti 
 * istek vremena za zahtevanje katanaca na 10 sekundi. */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sql.h>

EXEC SQL INCLUDE SQLCA;

EXEC SQL BEGIN DECLARE SECTION;
sqlint32 id;
char naziv[51];
short espb;
EXEC SQL END DECLARE SECTION;

void checkSQL(const char *msg) {
    if (sqlca.sqlcode < 0) {
        char Buffer[1024];
        short BufferSize = sizeof(Buffer);
        short LineWidth = 50;
        sqlaintp(Buffer, BufferSize, LineWidth, &sqlca);

        printf("Greska %d: %s\n", sqlca.sqlcode, msg);
        printf("%s\n", Buffer);
        
        EXEC SQL ROLLBACK;
        EXEC SQL SET CURRENT LOCK TIMEOUT NULL;
        EXEC SQL CONNECT RESET;
        exit(EXIT_FAILURE);
    }
}

int waitForLock(const char *msg);

sqlint32 identifikatori[1000];
unsigned brIdentifikatora = 0u;

int obradjenPredmet(sqlint32 id){
    unsigned i;
    for(i = 0u; i < brIdentifikatora; i++){
        if(identifikatori[i] == id)
            return 1;
    }
    return 0;
}

void zapisiKaoObradjen(sqlint32 id){
    identifikatori[brIdentifikatora] = id;
    brIdentifikatora++;
}

int main() {
    EXEC SQL CONNECT TO stud2020 USER student USING abcdef;
    checkSQL("CONNECT TO");

    EXEC SQL SET CURRENT LOCK TIMEOUT 10;
    checkSQL("Lock 10");
    
    EXEC SQL 
        DECLARE cPredmeti CURSOR WITH HOLD FOR
        SELECT NAZIV, ESPB, ID
        FROM DA.PREDMET
        FOR UPDATE OF ESPB;
    checkSQL("Declare");
    
    EXEC SQL 
        OPEN cPredmeti;
    checkSQL("Open");
    
    for(;;){
        EXEC SQL 
            FETCH cPredmeti
            INTO :naziv, :espb, :id;
        if(waitForLock("Fetch"))
            continue;
        checkSQL("Fetch");
        
        if(SQLCODE == 100)
            break;
        
        if(obradjenPredmet(id))
            continue;
        
        printf("%d - %s (%hd)\n", id, naziv, espb);
        printf("Da li zelite da povecate broj poena za 1? [d/n]\n");
        char odgovor = getchar();
        getchar();
        if(odgovor == 'd'){
            EXEC SQL 
                UPDATE DA.PREDMET
                SET ESPB = ESPB + 1
                WHERE CURRENT OF cPredmeti;
            if(waitForLock("Update"))
                continue;
            checkSQL("Update");
            
            printf("Uspesno azuriranje\n");
        }
        
        EXEC SQL COMMIT;
        checkSQL("Commit");
        
        zapisiKaoObradjen(id);
    }
    
    EXEC SQL 
        CLOSE cPredmeti;
    checkSQL("Close");
    
    EXEC SQL SET CURRENT LOCK TIMEOUT NULL;
    checkSQL("Lock NULL");    

    EXEC SQL COMMIT;
    checkSQL("COMMIT - kraj programa");
    
    EXEC SQL CONNECT RESET;
    checkSQL("CONNECT RESET");
    
    return 0;
}

int waitForLock(const char *msg) {
    if(-913 <= SQLCODE && SQLCODE <= -911){
        printf("[%s]\n", msg);
        EXEC SQL ROLLBACK;
        checkSQL("Rollback");
        EXEC SQL OPEN cPredmeti;
        checkSQL("Open");
        return 1;
    }
    
    return 0;
}
