# -*- coding: utf-8 -*-
"""02_n_dama.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13BNYSmoduu72F5y2IURD6c97k1g-SJmY

***Branch and Bound*** - problem n dama
- sahovska tabla 8x8
- zadatak je postaviti dame tako da se medjusobno ne napadaju
- 2n-1 dijagonala
- indeksi dijagonala: r+c ili r-c+n-1
"""

import numpy as np

def print_solution(board):
    n = board.shape[0]
    for i in range(n):
        for j in range(n):
            print(board[i][j], end=' ')
        print()

def is_free(row, column, row_check, diag1_check, diag2_check):
    n = row_check.shape[0]

    if row_check[row] or diag1_check[row+column] or diag2_check[row-column+n-1]:
        return False

    return True

def bnb(board, column, row_check, diag1_check, diag2_check):
    n = board.shape[0]

    if column >= n:
        return True

    for row in range(n):
        if is_free(row, column, row_check, diag1_check, diag2_check):
            board[row][column] = 'Q'
            row_check[row] = True
            diag1_check[row+column] = True
            diag2_check[row-column+n-1] = True

            if bnb(board, column+1, row_check, diag1_check, diag2_check):
                return True

            board[row][column] = '.'
            row_check[row] = False
            diag1_check[row+column] = False
            diag2_check[row-column+n-1] = False

    return False

def solve(n):
    board = np.full((n,n), '.', dtype=str)
    row_check = np.full(n, False)
    diag1_check = np.full(2*n-1, False)
    diag2_check = np.full(2*n-1, False)

    if not bnb(board, 0, row_check, diag1_check, diag2_check):
        print("Nema resenja")
        return False

    print_solution(board)

solve(8)