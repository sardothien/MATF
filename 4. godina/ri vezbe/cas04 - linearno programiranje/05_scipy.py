# -*- coding: utf-8 -*-
"""05_scipy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OtMlZS4aOYvWFNaq1HMKUiRvDY08XFMo

Minimizovati: $f(x_0, x_1) = 3x_0 + 4x_1$ \\
Ogranicenja: \\
- $x_0 + 2x_1 \leq 14$ \\
- $x_1 \leq 3x_0$ \\
- $x_0 - x_1 \leq 2$
- $x_0, x_1 > 0$
"""

from scipy import optimize as opt
import numpy as np

# f(x) = c*x
c = np.array([3, 4])

A_ub = np.array([[1, 2], [-3, 1], [1, -1]])

b_ub = np.array([14, 0, 2])

opt.linprog(c, A_ub, b_ub)

"""Minimizovati:
$$ f(x,y) = 2xy + 2x - x^2 - y^2 $$
Ogranicenja:
$$ g_1(x, y) = x^3 - y = 0 \\
   g_2(x, y) = y - 1 \geq 0 $$
"""

def f(x): # x nam je zapravo (x, y)
    return 2*x[0]*x[1] + 2*x[0] - x[0]**2 - x[1]**2

# lista recnika
# 'type' -> eq (=) ili ineq (<=)
# 'fun' -> funkcija ogranicenja
# 'jac' -> izvod funkcije ogranicenja (po x i po y)
c = [{
        'type' : 'eq',
        'fun' : lambda x : np.array([x[0]**3 - x[1]]),
        'jac' : lambda x : np.array([3*x[0]**2, -1])
    },
    {
        'type' : 'ineq',
        'fun' : lambda x : np.array([-x[1]+1]),
        'jac' : lambda x : np.array([0, -1])
    }]

opt.minimize(f, (0,0), constraints=c, method='SLSQP')