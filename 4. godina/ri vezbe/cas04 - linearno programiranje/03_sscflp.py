# -*- coding: utf-8 -*-
"""03_sscflp.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Dx1flv2XjIEMIENkHQFFu0jhU2vmDFB6

**SSCFLP**
- dodatno u odnosu na UFLP: potraznja $d_i$ i kapacitet resursa $s_j$ \\
- minimizacioni problem ostaje isti
- dodatna ogranicenja:
$$ \sum_{j \in J} x_{ij} = 1, \forall i \in I $$
$$ \sum_{i \in I} x_{ij}d_i \leq s_jy_j, \forall j \in J $$
"""

def readInput(filename):
    with open(filename, 'r') as f:
        numUsers, numResources = [int(x) for x in f.readline().split()]
        cost = [[int(x) for x in f.readline().split()] for i in range(numUsers)]
        fixedCost = [int(x) for x in f.readline().split()]
        return (numUsers, numResources, cost, fixedCost)

(numUsers, numResources, cost, fixedCost) = readInput('in.txt')

pip install docplex

from docplex.mp.model import Model

d = [1 for x in range(numUsers)]
s = [3 for x in range(numResources)]

model = Model(name='sscflp')

x = model.binary_var_matrix(numUsers, numResources, name='x')

y = model.binary_var_list(numResources, name='y')

# Ogranicenja #

for i in range(numUsers):
    model.add_constraint(model.sum(x[i,j] for j in range(numResources)) == 1)

for j in range(numResources):
    model.add_constraint(model.sum(d[i]*x[i,j] for i in range(numUsers)) <= s[j]*y[j])

first_sum = sum([sum([x[i,j]*cost[i][j] for j in range(numResources)]) for i in range(numUsers)])

second_sum = sum([y[j]*fixedCost[j] for j in range(numResources)])

model.minimize(first_sum+second_sum)

model.print_information()

model.solve()

model.print_solution()