%{
    #include<iostream>
    #include<cstdlib>
    #include<string>
    #include<map>
    #include"skup.hpp"
    using namespace std;
    
    #define YYDEBUG 1
    
    extern FILE *yyin;
    map<string, Skup*> promenljive;
    Skup* universe = nullptr;
    
    extern int yylex();
    void deinicijalizacija();
    void yyerror(string s);
%}

%union {
    std::string *ime;
    int i_val;
    Skup* elementi;
}

%nonassoc ':' '<'
%left U
%left P R
%right '~'

%token<ime> ID
%token<i_val> BROJ
%token PRINT TT CHECK CARD UNIVERSE

%type<elementi> skup lista

%start program

%%
program : program naredba {}
          |               {}
          ;
          
naredba : ID '=' skup ';'           {
                                        auto trazen = promenljive.find(*$1);
                                        if(trazen != promenljive.end())
                                            delete trazen->second;
                                        promenljive[*$1] = $3;
                                        delete $1;
                                    }
         | PRINT skup ';'           { $2->stampaj(); }
         | CHECK BROJ ':' skup ';'  { 
                                        if($4->nadji($2))
                                            printf("True!\n");
                                        else
                                            printf("False!\n");
                                        delete $4;
                                    }
         | CHECK skup '<' skup ';'  {
                                        if($2->podskup($4))
                                            printf("True!\n");
                                        else 
                                            printf("False!\n");
                                        delete $2;
                                        delete $4;
                                    }
         | CARD skup ';'            { cout << $2->brojElemenata() << endl; }
         | UNIVERSE '=' skup ';'    { 
                                        if(universe != nullptr)
                                            delete universe;
                                        else
                                            universe = $3;
                                    }
         ;
         
skup : '~' skup         { 
                            if(universe == nullptr)
                                yyerror("Univerzalni skup nije definisan!");
                            $$ = razlika(universe, $2);
                            delete $2;
                        }
      | skup U skup     {
                            $$ = unija($1, $3);
                            delete $1;
                            delete $3;
                        }
      | skup P skup     {
                            $$ = presek($1, $3);
                            delete $1;
                            delete $3;
                        }
      | skup R skup     {
                            $$ = razlika($1, $3);
                            delete $1;
                            delete $3;
                        }
      | '{' lista '}'   { $$ = $2; }
      | BROJ TT BROJ    { $$ = new Skup($1, $3); }
      | ID              {
                            auto trazen = promenljive.find(*$1);
                            if(trazen == promenljive.end())
                                yyerror(string("Nepostojeci skup ")+*$1);
                            $$ = new Skup(*(trazen->second));
                            delete $1;
                        }
      ;
      
lista : lista ',' BROJ  { 
                            $$ = $1;
                            $$->dodaj($3);
                        }
        | BROJ          {
                            $$ = new Skup();
                            if($$ == NULL)
                                yyerror("Alokacija novog skupa nije uspela!");
                            $$->dodaj($1);
                        }
        ;
%%

void yyerror(string s){
    cerr << s << endl;
    deinicijalizacija();
    exit(EXIT_FAILURE);
}

void deinicijalizacija(){
    for(auto i = promenljive.begin(); i != promenljive.end(); i++)
        delete i->second;
    delete universe;
}

int main(){
    
    yydebug = 0;
    
    yyin = fopen("ulaz2.txt", "r");
    if(yyin == NULL)
        yyerror("Neuspesno otvaranje datoteke.");
        
    yyparse();
    
    fclose(yyin);
    
    deinicijalizacija();
    
    return 0;
}
